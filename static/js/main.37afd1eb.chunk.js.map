{"version":3,"sources":["components/UI/ErrorModal.module.css","components/UI/Card.js","components/UI/Button.js","components/UI/ErrorModal.js","components/Users/AddUser.js","components/Users/UsersList.js","App.js","index.js","components/UI/Card.module.css","components/UI/Button.module.css","components/Users/AddUser.module.css","components/Users/UsersList.module.css"],"names":["module","exports","backdrop","modal","header","content","actions","Card","props","react_default","a","createElement","className","concat","classes","card","children","Button","button","type","onClick","Backdrop","onConfirm","ModalOverlay","UI_Card","title","message","UI_Button","ErrorModal","Fragment","ReactDOM","createPortal","ErrorModal_Backdrop","document","getElementById","ErrorModal_ModalOverlay","AddUser","nameInputRef","useRef","ageInputRef","_useState","useState","_useState2","Object","slicedToArray","error","setError","UI_ErrorModal","input","onSubmit","event","preventDefault","enteredUserName","current","value","enteredUserAge","trim","length","onAddUser","htmlFor","id","ref","UsersList","users","map","user","index","key","name","age","App","usersList","setUsersList","Users_AddUser","userName","userAge","prevUsersList","toConsumableArray","Users_UsersList","createRoot","render","src_App"],"mappings":"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","file":"static/js/main.37afd1eb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"backdrop\":\"ErrorModal_backdrop__3nMqJ\",\"modal\":\"ErrorModal_modal__1c_kM\",\"header\":\"ErrorModal_header__38rRj\",\"content\":\"ErrorModal_content__rHznn\",\"actions\":\"ErrorModal_actions__AC_Dp\"};","import React from 'react';\n\n//Use modules feature to import the classes from matching css module\n//Note we will also be passing in an additional class 'className' via props to the card component\nimport classes from './Card.module.css';\n\nconst Card = props => {\n    return <div className={`${classes.card} ${props.className}`}>{props.children}</div>\n};\n\nexport default Card; ","import React from 'react';\n\nimport classes from './Button.module.css';\n\nconst Button = props => {\n    return <button \n        className={classes.button} \n        type={props.type || 'button'} \n        onClick={props.onClick}\n    >\n        {props.children}\n    </button>\n};\n\nexport default Button;","import React from 'react';\n//Use for using portal to place modal into App\nimport ReactDOM from 'react-dom';\n\nimport Card from './Card';\nimport Button from './Button';\nimport classes from './ErrorModal.module.css';\n\n//Black overlay in background\nconst Backdrop = props => {\n    return <div className={classes.backdrop} onClick={props.onConfirm}/>;\n};\n\n//Modal window\nconst ModalOverlay = props => {\nreturn (\n    <Card className={classes.modal}>\n        <header className={classes.header}>\n            <h2>{props.title}</h2>\n        </header>\n        <div className={classes.content}>\n            <p>{props.message}</p>\n        </div>\n        <footer className={classes.actions}>\n            <Button onClick={props.onConfirm}>Close</Button>\n        </footer>\n    </Card>\n)};\n\n//Here we will 'put the backdrop and modal together' and send to the App via a portal\n//Using createPortal from react-dom, place the backdrop and modal into the divs defined as backdrop-root and overlay-root\nconst ErrorModal = props => {\n    return (\n        <React.Fragment>\n            {ReactDOM.createPortal(\n                <Backdrop onConfirm={props.onConfirm}/>, \n                document.getElementById('backdrop-root')\n            )}\n            {ReactDOM.createPortal(\n                <ModalOverlay title={props.title} message={props.message} onConfirm={props.onConfirm}/>,\n                document.getElementById('overlay-root')\n            )}\n        </React.Fragment>\n    );\n};\n\nexport default ErrorModal;","import React, { useState, useRef } from 'react';\n\nimport Card from '../UI/Card';\nimport Button from '../UI/Button';\nimport ErrorModal from '../UI/ErrorModal';\n\n//Import custom css module classes from matching module css file. \nimport classes from './AddUser.module.css';\n\nconst AddUser = props => {\n    //Create references to name and age user inputs.\n    const nameInputRef = useRef();\n    const ageInputRef = useRef();\n\n    //Set state for error\n    const [error, setError] = useState();\n\n    //Handle what happens when user submits username and age\n    const addUserHandler = event => {\n        event.preventDefault();\n\n        //Use Ref to name and age\n        const enteredUserName = nameInputRef.current.value;\n        const enteredUserAge = ageInputRef.current.value;\n\n        //Validate inputs\n        if(enteredUserName.trim().length === 0 || enteredUserAge.trim().length === 0) {\n            setError({\n                title: \"Invalid input\",\n                message: \"Please enter a valid name and age (non-empty values)\"\n            });\n            return;\n        }\n        if(+enteredUserAge < 1) {\n            setError({\n                title: \"Invalid Age\",\n                message: \"Please enter a valid age greater than 0\"\n            });\n            return;\n        }\n\n        //Using onAddUser prop passed in from App, add new user using current state; Passes this data back into App\n        //Triggers addUserHandler back in App\n        props.onAddUser(enteredUserName, enteredUserAge);\n\n        //Reset inputs\n        nameInputRef.current.value = '';\n        ageInputRef.current.value = '';\n    };\n\n    //Reset the error message state\n    const errorHandler = () => {\n        setError(null);\n    };\n\n    return (\n        <>\n            {error && <ErrorModal title={error.title} message={error.message} onConfirm={errorHandler}/>}\n            <Card className={classes.input}>\n                <form onSubmit={addUserHandler}>\n                    <label htmlFor=\"username\">Username</label>\n                    <input \n                        id=\"username\" \n                        type=\"text\" \n                        ref={nameInputRef}\n                    />\n                    <label htmlFor=\"age\">Age</label>\n                    <input \n                        id=\"age\" \n                        type=\"number\" \n                        ref={ageInputRef}\n                    />\n                    <Button type=\"submit\">Add User</Button>\n                </form>\n            </Card>\n        </>\n    )\n};\n\nexport default AddUser;","import React from 'react';\n\n//Reuse Card for output as well\nimport Card from '../UI/Card';\nimport classes from './UsersList.module.css'\n\nconst UsersList = props => {\n    return (\n        <Card className={classes.users}>\n            <ul>\n                {props.users.map((user, index) => (\n                    <li key={`person-${index}`}>\n                        {user.name} ({user.age} years old)\n                    </li>\n                ))}\n            </ul>\n        </Card>\n    );\n};\n\nexport default UsersList;","import React, { useState } from 'react';\n\nimport AddUser from './components/Users/AddUser';\nimport UsersList from './components/Users/UsersList';\n\nfunction App() {\n  //Keep track of saved users.\n  const [usersList, setUsersList] = useState([]);\n\n  //Updates state in App by pushing new user (from AddUser component)\n  const addUserHandler = (userName, userAge) => {\n    //Update state array by inserting new object with retrieved values\n    //Since we are relying on previous state, we pass function into setUsersList, which will allow access to previous state\n    setUsersList(prevUsersList => {\n      return [...prevUsersList, \n        {\n          name: userName, \n          age: userAge\n        }\n      ];\n    });\n  };\n\n  return (\n    <div>\n        <AddUser onAddUser={addUserHandler}/>\n        <UsersList users={usersList}/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\n\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<App />);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__32GBl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__AUAZP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"AddUser_input__1P68q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"users\":\"UsersList_users__3D6S3\"};"],"sourceRoot":""}